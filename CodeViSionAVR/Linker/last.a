;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 21-Dec-2023
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;// External Interrupt 0 service routine
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define ADC_VREF_TYPE 0x00
;
;unsigned long ADC_OUT, dienap;
;unsigned char tram, chuc, chuclcd, dvilcd, dvi, txt[10], dem=0, rx_data,cnt;
;int i=0, tcn1=240, tcn2=189;

	.DSEG
;//unsigned char offLed[3];
;//char received_string[5];
;char count_str[10], temp[10], nhietdo, rx_buffer[5], myString[]="Nhiet do la: ";
;
;//void getstring(char *string, unsigned char length);
;
;void uart_char_send(unsigned char c){
; 0000 004D void uart_char_send(unsigned char c){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004E     while(!(UCSRA & (1<<UDRE)));
;	c -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 004F     UDR=c;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0050 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;void uart_string_send(unsigned char *txt, char terminator){
; 0000 0052 void uart_string_send(unsigned char *txt, char terminator){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0053     unsigned long n, i;
; 0000 0054     n=strlen(txt);
;PCODE: $0000001C VOL: 0
;	*txt -> Y+9
;	terminator -> Y+8
;	n -> Y+4
;	i -> Y+0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0055     for(i=0;i<n;i++){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0056         uart_char_send(txt[i]);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0057     }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0058     uart_char_send(terminator);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0059 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;char uart_receive(){
; 0000 005A char uart_receive(){
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005B      while(!(UCSRA & (1<<RXC)));
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005C      return UDR;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005D }
;PCODE: $00000049 VOL: 0
;void uart_string_receive(){
; 0000 005E void uart_string_receive(){
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005F      char rx=uart_receive();
; 0000 0060      for(i=0;i<10;i++){
;PCODE: $0000004C VOL: 0
;	rx -> R17
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0061         txt[i]=rx;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0062      }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0063 }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;// interrupt receive
;//char rx_buffer[5];
;interrupt [USART_RXC] void usart_rx_isr (void){
; 0000 0066 interrupt [12] void usart_rx_isr (void){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0067     char data;
; 0000 0068     data = UDR;
;PCODE: $00000066 VOL: 0
;	data -> R17
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0069     //uart_char_send(data);
; 0000 006A     if(data=='a'){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006B         PORTB.0=~PORTB.0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006C     }else if(data=='b'){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006D         PORTB.1=~PORTB.1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006E     }else if(data=='c'){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006F         PORTB.2=~PORTB.2;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0070     }else if(data=='d'){
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0071         PORTB.3=~PORTB.3;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0072     }else if(data=='e'){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0073         PORTB.4=~PORTB.4;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0074     }else if(data=='f'){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0075         PORTB.5=~PORTB.5;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0076     }else if(data=='g'){
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0077         PORTB.6=~PORTB.6;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0078     }else if(data=='h'){
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0079         PORTB.7=~PORTB.7;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 007A     }
; 0000 007B     if(data>='A'&&data<='F'||data>='0'&&data<='9'){
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 007C         rx_buffer[i]=data;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 007D         i++;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 007E     }
; 0000 007F     if(i==4){
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0080          if(strcmp(rx_buffer, "F0BD")==0){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0081             tcn1=240;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0082             tcn2=189;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0083     }else if(strcmp(rx_buffer, "E17C")==0){
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0084             tcn1=225;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0085             tcn2=124;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0086     }else if(strcmp(rx_buffer, "D23A")==0){
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0087             tcn1=210;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0088             tcn2=58;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0089     }else if(strcmp(rx_buffer, "C2F8")==0){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 008A             tcn1=194;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 008B             tcn2=248;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 008C     }else if(strcmp(rx_buffer, "B3B5")==0){
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 008D             tcn1=179;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 008E             tcn2=181;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 008F     }else if(strcmp(rx_buffer, "A473")==0){
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0090             tcn1=164;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0091             tcn2=115;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0092     }else if(strcmp(rx_buffer, "9531")==0){
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0093             tcn1=149;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0094             tcn2=49;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0095     }else if(strcmp(rx_buffer, "85EF")==0){
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0096             tcn1=133;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0097             tcn2=239;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0098     }else if(strcmp(rx_buffer, "76AC")==0){
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0099             tcn1=118;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 009A             tcn2=172;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 009B     }else if(strcmp(rx_buffer, "676A")==0){
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 009C             tcn1=103;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 009D             tcn2=106;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 009E     }
; 0000 009F         i=0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00A0     }
; 0000 00A1 }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0

	.DSEG
_0x3A:
	.BYTE 0x32
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00A7 {

	.CSEG
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00A8     // khoi tao thanh ghi
; 0000 00A9     TCNT1H=tcn1;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00AA     TCNT1L=tcn2;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00AB     PORTC.0=~PORTC.0;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00AC }
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;
;//External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 00B0 {
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00B1     cnt++;
;PCODE: $000001B2 VOL: 0
; 0000 00B2     PORTC.5=~PORTC.5;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00B3     chuc=cnt/10;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00B4     dvi=cnt%10;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00B5 
; 0000 00B6     uart_char_send(chuc+0x30);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00B7     uart_char_send(dvi+0x30);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00B8     uart_char_send('#');
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00B9 
; 0000 00BA }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00BE {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00BF ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00C0 // Delay needed for the stabilization of the ADC input voltage
; 0000 00C1 delay_us(10);
;PCODE: $000001DA VOL: 0
; 0000 00C2 // Start the AD conversion
; 0000 00C3 ADCSRA|=0x40;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00C4 // Wait for the AD conversion to complete
; 0000 00C5 while ((ADCSRA & 0x10)==0);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00C6 ADCSRA|=0x10;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00C7 return ADCW;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00C8 }
;PCODE: $000001E8 VOL: 0
;void send_temp(){
; 0000 00C9 void send_temp(){
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00CA         ADC_OUT=read_adc(0);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00CB         dienap = ADC_OUT*5000/1023;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00CC         nhietdo=dienap/10;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00CD 
; 0000 00CE         chuc=nhietdo/10;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00CF         dvi=nhietdo%10;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 00D0         sprintf(temp, "%d", nhietdo);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00D1         uart_string_send(temp, '$');
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00D2         delay_ms(200);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00D3         uart_char_send(13);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00D4 }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;
;void main(void)
; 0000 00D7 {
;PCODE: $0000021E VOL: 0
; 0000 00D8 // Declare your local variables here
; 0000 00D9 
; 0000 00DA // Input/Output Ports initialization
; 0000 00DB // Port A initialization
; 0000 00DC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DD // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DE PORTA=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00DF DDRA=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 00E0 
; 0000 00E1 // Port B initialization
; 0000 00E2 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00E3 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00E4 PORTB=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 00E5 DDRB=0xFF;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00E6 
; 0000 00E7 // Port C initialization
; 0000 00E8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 00E9 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 00EA PORTC=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 00EB DDRC=0x21;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 00EC 
; 0000 00ED // Port D initialization
; 0000 00EE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 00EF // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=T
; 0000 00F0 PORTD=0x04;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00F1 DDRD=0x02;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 00F2 
; 0000 00F3 // Timer/Counter 0 initialization
; 0000 00F4 // Clock source: System Clock
; 0000 00F5 // Clock value: Timer 0 Stopped
; 0000 00F6 // Mode: Normal top=0xFF
; 0000 00F7 // OC0 output: Disconnected
; 0000 00F8 TCCR0=0x00;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 00F9 TCNT0=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 00FA OCR0=0x00;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 00FB 
; 0000 00FC // Timer/Counter 1 initialization
; 0000 00FD // Clock source: System Clock
; 0000 00FE // Clock value: 7.813 kHz
; 0000 00FF // Mode: Normal top=0xFFFF
; 0000 0100 // OC1A output: Discon.
; 0000 0101 // OC1B output: Discon.
; 0000 0102 // Noise Canceler: Off
; 0000 0103 // Input Capture on Falling Edge
; 0000 0104 // Timer1 Overflow Interrupt: On
; 0000 0105 // Input Capture Interrupt: Off
; 0000 0106 // Compare A Match Interrupt: Off
; 0000 0107 // Compare B Match Interrupt: Off
; 0000 0108 TCCR1A=0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0109 TCCR1B=0x05;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 010A 
; 0000 010B TCNT1H=tcn1;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 010C TCNT1L=tcn2;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 010D 
; 0000 010E ICR1H=0x00;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 010F ICR1L=0x00;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0110 OCR1AH=0x00;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0111 OCR1AL=0x00;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0112 OCR1BH=0x00;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0113 OCR1BL=0x00;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0114 
; 0000 0115 // Timer/Counter 2 initialization
; 0000 0116 // Clock source: System Clock
; 0000 0117 // Clock value: Timer2 Stopped
; 0000 0118 // Mode: Normal top=0xFF
; 0000 0119 // OC2 output: Disconnected
; 0000 011A ASSR=0x00;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 011B TCCR2=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 011C TCNT2=0x00;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 011D OCR2=0x00;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 011E 
; 0000 011F // External Interrupt(s) initialization
; 0000 0120 // INT0: On
; 0000 0121 // INT0 Mode: Falling Edge
; 0000 0122 // INT1: Off
; 0000 0123 // INT2: Off
; 0000 0124 GICR|=0x40;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0125 MCUCR=0x02;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0126 MCUCSR=0x00;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0127 GIFR=0x40;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0128 
; 0000 0129 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012A TIMSK=0x04;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 012B 
; 0000 012C // USART initialization
; 0000 012D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 012E // USART Receiver: On
; 0000 012F // USART Transmitter: On
; 0000 0130 // USART Mode: Asynchronous
; 0000 0131 // USART Baud Rate: 9600
; 0000 0132 UCSRA=0x00;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0133 UCSRB=0x98;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0134 UCSRC=0x86;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0135 UBRRH=0x00;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0136 UBRRL=0x33;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0137 
; 0000 0138 // Analog Comparator initialization
; 0000 0139 // Analog Comparator: Off
; 0000 013A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 013B ACSR=0x80;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 013C SFIOR=0x00;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 013D 
; 0000 013E 
; 0000 013F // ADC initialization
; 0000 0140 // ADC Clock frequency: 1000.000 kHz
; 0000 0141 // ADC Voltage Reference: AREF pin
; 0000 0142 // ADC Auto Trigger Source: ADC Stopped
; 0000 0143 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0144 ADCSRA=0x83;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0145 
; 0000 0146 // SPI initialization
; 0000 0147 // SPI disabled
; 0000 0148 SPCR=0x00;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0149 
; 0000 014A // TWI initialization
; 0000 014B // TWI disabled
; 0000 014C TWCR=0x00;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 014D 
; 0000 014E // Alphanumeric LCD initialization
; 0000 014F // Connections specified in the
; 0000 0150 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0151 // RS - PORTA Bit 7
; 0000 0152 // RD - PORTA Bit 6
; 0000 0153 // EN - PORTA Bit 5
; 0000 0154 // D4 - PORTA Bit 4
; 0000 0155 // D5 - PORTA Bit 3
; 0000 0156 // D6 - PORTA Bit 2
; 0000 0157 // D7 - PORTA Bit 1
; 0000 0158 // Characters/line: 16
; 0000 0159 lcd_init(16);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 015A 
; 0000 015B // Global enable interrupts
; 0000 015C #asm("sei")
;PCODE: $00000275 VOL: 0
	sei
;PCODE: $00000276 VOL: 0
; 0000 015D ADC_OUT=read_adc(0);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 015E 
; 0000 015F while (1)
;PCODE: $0000027C VOL: 0
; 0000 0160       {
; 0000 0161         ADC_OUT=read_adc(0);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0162         dienap = ADC_OUT*5000/1023;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0163         nhietdo=dienap/10;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0164 
; 0000 0165         chuc=nhietdo/10;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0166         dvi=nhietdo%10;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0167 
; 0000 0168         sprintf(temp, "%d", nhietdo);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 0169         lcd_gotoxy(0, 0);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 016A         lcd_puts("nhiet do: ");
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 016B         lcd_gotoxy(9, 0);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 016C         lcd_putchar(chuc+0x30);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 016D         lcd_putchar(dvi+0x30);
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 016E 
; 0000 016F         send_temp();
;PCODE: $000002B9 VOL: 0
; 0000 0170       }
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0171 }
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0

	.DSEG
_0x57:
	.BYTE 0xB
