;z/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;ï¿½ Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 14-Dec-2023
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
; 0000 0017 
; 0000 0018 #include <mega16.h>

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000005 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000006 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000007 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000009 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $0000000A VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $0000000B VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $0000000C VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $0000000D VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000E VOL: 0
	#endif
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;#include <delay.h>
;#include <string.h>
;// Standard Input/Output functions
;#include <stdio.h>
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0023 {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0024 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025 // Delay needed for the stabilization of the ADC input voltage
; 0000 0026 delay_us(10);
;PCODE: $00000016 VOL: 0
; 0000 0027 // Start the AD conversion
; 0000 0028 ADCSRA|=0x40;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0029 // Wait for the AD conversion to complete
; 0000 002A while ((ADCSRA & 0x10)==0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002B ADCSRA|=0x10;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C return ADCW;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002D }
;PCODE: $00000024 VOL: 0
;
;void uart_char_send(unsigned char c){
; 0000 002F void uart_char_send(unsigned char c){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0030     while(!(UCSRA & (1<<UDRE)));
;	c -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0031     UDR=c;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0032 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;void uart_string_send(unsigned char *txt){
; 0000 0034 void uart_string_send(unsigned char *txt){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0035     unsigned char n, i;
; 0000 0036     n=strlen(txt);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0037     for(i=0;i<n;i++){
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038         uart_char_send(txt[i]);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0039     }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003A }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;char uart_receive(){
; 0000 003B char uart_receive(){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 003C      while(!(UCSRA & (1<<UDRE)));
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D      return UDR;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003E }
;PCODE: $0000005E VOL: 0
;// interrupt receive
;interrupt [USART_RXC] void usart_rx_isr (void){
; 0000 0040 interrupt [12] void usart_rx_isr (void){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0041     char data;
; 0000 0042     data = UDR;
;PCODE: $00000061 VOL: 0
;	data -> R17
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0043     uart_char_send(data);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0044     lcd_gotoxy(0,0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0045     lcd_putchar(data);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0046     if(data=='1'){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0047         PORTC.5=1;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0048     }else if(data=='a'){
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0049         PORTC.5=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004A     }else if(data=='2'){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004B         PORTC.4=1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004C     }else if(data=='b'){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004D         PORTC.4=0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004E     }
; 0000 004F }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0053 {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0054     PORTC.0=~PORTC.0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0055 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;// Declare your global variables here
;
;unsigned long ADC_OUT, dienap, nhietdo;
;unsigned char tram, chuc, dvi;
;
;void main(void)
; 0000 005C {
;PCODE: $0000009E VOL: 0
; 0000 005D // Declare your local variables here
; 0000 005E 
; 0000 005F // Input/Output Ports initialization
; 0000 0060 // Port A initialization
; 0000 0061 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0062 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0063 PORTA=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0064 DDRA=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0065 
; 0000 0066 // Port B initialization
; 0000 0067 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0068 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0069 PORTB=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 006A DDRB=0xFF;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006B 
; 0000 006C // Port C initialization
; 0000 006D // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 006E // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 006F PORTC=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0070 DDRC=0x01;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0071 
; 0000 0072 // Port D initialization
; 0000 0073 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
; 0000 0074 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=T
; 0000 0075 PORTD=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0076 DDRD=0x02;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 0 initialization
; 0000 0079 // Clock source: System Clock
; 0000 007A // Clock value: Timer 0 Stopped
; 0000 007B // Mode: Normal top=0xFF
; 0000 007C // OC0 output: Disconnected
; 0000 007D TCCR0=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007E TCNT0=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 007F OCR0=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0080 
; 0000 0081 // Timer/Counter 1 initialization
; 0000 0082 // Clock source: System Clock
; 0000 0083 // Clock value: Timer1 Stopped
; 0000 0084 // Mode: Normal top=0xFFFF
; 0000 0085 // OC1A output: Discon.
; 0000 0086 // OC1B output: Discon.
; 0000 0087 // Noise Canceler: Off
; 0000 0088 // Input Capture on Falling Edge
; 0000 0089 // Timer1 Overflow Interrupt: Off
; 0000 008A // Input Capture Interrupt: Off
; 0000 008B // Compare A Match Interrupt: Off
; 0000 008C // Compare B Match Interrupt: Off
; 0000 008D TCCR1A=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 008E TCCR1B=0x03;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 008F TCNT1H=0x0B;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0090 TCNT1L=0xDD;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0091 ICR1H=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0092 ICR1L=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0093 OCR1AH=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0094 OCR1AL=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0095 OCR1BH=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0096 OCR1BL=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 2 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: Timer2 Stopped
; 0000 009B // Mode: Normal top=0xFF
; 0000 009C // OC2 output: Disconnected
; 0000 009D ASSR=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 009E TCCR2=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 009F TCNT2=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A0 OCR2=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A1 
; 0000 00A2 // External Interrupt(s) initialization
; 0000 00A3 // INT0: Off
; 0000 00A4 // INT1: Off
; 0000 00A5 // INT2: Off
; 0000 00A6 MCUCR=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A7 MCUCSR=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A8 
; 0000 00A9 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AA TIMSK=0x04;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00AB 
; 0000 00AC // USART initialization
; 0000 00AD // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00AE // USART Receiver: On
; 0000 00AF // USART Transmitter: Off
; 0000 00B0 // USART Mode: Asynchronous
; 0000 00B1 // USART Baud Rate: 9600
; 0000 00B2 UCSRA=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B3 UCSRB=0x98;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00B4 UCSRC=0x03;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00B5 UBRRH=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B6 UBRRL=0x33;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B7 
; 0000 00B8 // Analog Comparator initialization
; 0000 00B9 // Analog Comparator: Off
; 0000 00BA // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BB ACSR=0x80;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00BC SFIOR=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BD 
; 0000 00BE // ADC initialization
; 0000 00BF // ADC Clock frequency: 1000.000 kHz
; 0000 00C0 // ADC Voltage Reference: AREF pin
; 0000 00C1 // ADC Auto Trigger Source: ADC Stopped
; 0000 00C2 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00C3 ADCSRA=0x83;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00C4 
; 0000 00C5 // SPI initialization
; 0000 00C6 // SPI disabled
; 0000 00C7 SPCR=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00C8 
; 0000 00C9 // TWI initialization
; 0000 00CA // TWI disabled
; 0000 00CB TWCR=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00CC 
; 0000 00CD // Alphanumeric LCD initialization
; 0000 00CE // Connections specified in the
; 0000 00CF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D0 // RS - PORTA Bit 7
; 0000 00D1 // RD - PORTA Bit 6
; 0000 00D2 // EN - PORTA Bit 5
; 0000 00D3 // D4 - PORTA Bit 4
; 0000 00D4 // D5 - PORTA Bit 3
; 0000 00D5 // D6 - PORTA Bit 2
; 0000 00D6 // D7 - PORTA Bit 1
; 0000 00D7 // Characters/line: 16
; 0000 00D8 lcd_init(16);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00D9 
; 0000 00DA // Global enable interrupts
; 0000 00DB #asm("sei")
;PCODE: $000000F0 VOL: 0
	sei
;PCODE: $000000F1 VOL: 0
; 0000 00DC ADC_OUT=read_adc(0);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00DD while (1)
;PCODE: $000000F7 VOL: 0
; 0000 00DE       {
; 0000 00DF //            ADC_OUT=read_adc(0);
; 0000 00E0 
; 0000 00E1 
; 0000 00E2 //            dienap = (ADC_OUT*5000)/1023;
; 0000 00E3 //            nhietdo=dienap/10;
; 0000 00E4 //            chuc=nhietdo/10;
; 0000 00E5 //            dvi=nhietdo%10;
; 0000 00E6 //
; 0000 00E7 //
; 0000 00E8 //            uart_char_send(chuc+0x30);
; 0000 00E9 //            uart_char_send(dvi+0x30);
; 0000 00EA //            uart_char_send(10);
; 0000 00EB //            uart_char_send(13);
; 0000 00EC //            delay_ms(100);
; 0000 00ED 
; 0000 00EE       }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00EF }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;
